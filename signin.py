# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'signin.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from errorinput import Ui_DialogErrorInput
from errorinputsymbols import Ui_DialogErrorInputSymbols
import os



class Ui_DialogSignIn(object):
    def setupUi(self, DialogSignIn):
        DialogSignIn.setObjectName("DialogSignIn")
        DialogSignIn.setWindowFlags(QtCore.Qt.WindowCloseButtonHint)
        DialogSignIn.setFixedSize(645, 220)
        DialogSignIn.setWindowIcon(QtGui.QIcon("icon/ico_signin.ico"))
        DialogSignIn.setStyleSheet("background-color: rgb(56, 37, 0); color: White;")
        self.verticalLayout = QtWidgets.QVBoxLayout(DialogSignIn)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(DialogSignIn)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.comboBoxNick = QtWidgets.QComboBox(DialogSignIn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBoxNick.sizePolicy().hasHeightForWidth())
        self.comboBoxNick.setSizePolicy(sizePolicy)
        self.comboBoxNick.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.comboBoxNick.setFont(font)
        self.comboBoxNick.setStyleSheet("background-color: rgb(83, 55, 0); color: White")
        self.comboBoxNick.setEditable(True)
        self.comboBoxNick.setObjectName("comboBoxNick")
        self.comboBoxNick.setStyleSheet("background-color: rgb(107, 71, 0);color:White; selection-background-color:#8a6800; top: 1px; left: 1px;")
        self.verticalLayout.addWidget(self.comboBoxNick)
        self.frameButtons = QtWidgets.QFrame(DialogSignIn)
        self.frameButtons.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameButtons.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameButtons.setObjectName("frameButtons")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frameButtons)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButtonSignIn = QtWidgets.QPushButton(self.frameButtons)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButtonSignIn.setFont(font)
        self.pushButtonSignIn.setStyleSheet("QPushButton {background-color: rgb(107, 71, 0);color:White;border-style: outset;border-width: 2px;border-radius: 15px;border-color: rgb(107, 71, 0);padding: 4px;}\n"
"QPushButton:pressed {background-color: #382500;color: White;border-style: outset;border-width: 2px;border-radius: 15px;border-color: #241800;padding: 4px;}")
        self.pushButtonSignIn.setObjectName("pushButtonSignIn")
        self.horizontalLayout.addWidget(self.pushButtonSignIn)
        self.pushButtonExit = QtWidgets.QPushButton(self.frameButtons)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButtonExit.setFont(font)
        self.pushButtonExit.setStyleSheet("QPushButton {background-color: rgb(107, 71, 0);color:White;border-style: outset;border-width: 2px;border-radius: 15px;border-color: rgb(107, 71, 0);padding: 4px;}\n"
"QPushButton:pressed {background-color: #382500;color: White;border-style: outset;border-width: 2px;border-radius: 15px;border-color: #241800;padding: 4px;}")
        self.pushButtonExit.setObjectName("pushButtonExit")
        self.horizontalLayout.addWidget(self.pushButtonExit)
        self.verticalLayout.addWidget(self.frameButtons)

        self.pushButtonExit.clicked.connect(self.close)
        self.pushButtonSignIn.clicked.connect(self.signin)

        self.retranslateUi(DialogSignIn)
        QtCore.QMetaObject.connectSlotsByName(DialogSignIn)
        forFirst = "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600; color:#ffffff;\">Вход</span></p><p><span style=\" font-size:10pt; color:#ffffff;\">Пожалуйста, введите своё имя(ник)</span></p></body></html>"
        forOther = "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600; color:#ffffff;\">Вход</span></p><p><span style=\" font-size:10pt; color:#ffffff;\">Пожалуйста, введите своё имя(ник), или выберите из предложенных</span></p></body></html>"
        checkdir = os.path.exists('users')
        if checkdir == False:       #если первый раз
            self.label.setText(forFirst)    #заполнение диолога для первого раза
        elif checkdir == True:              #если не первый рах
            self.label.setText(forOther)    #заполнение "не первый раз"
            cheklist = os.path.exists('users/list') #проверка существования списка старых пользователей
            if cheklist == True:

                userList = open('users/list', 'r')  #если они есть

                while True:             #цикл заполняющий комбобокс со старыми пользователями беря их из файла list построчно 
                    line = userList.readline()
                    self.comboBoxNick.addItems(line.strip().splitlines())
                    if not line:
                            break
                userList.close()

                userCurrent = open('users/current', 'r')

                while True:
                    line1 = userCurrent.readline()
                    self.comboBoxNick.addItems(line1.strip().splitlines())
                    if not line1:
                            break
                userCurrent.close()
                
                self.comboBoxNick.addItem('')
                self.comboBoxNick.setCurrentIndex(self.comboBoxNick.findText(''))
            elif cheklist == False:     #если листа нет добавляет ранее войдённого пользователя в комбо бокс (current)

                userCurrent = open('users/current', 'r')    

                while True:
                    line1 = userCurrent.readline()
                    self.comboBoxNick.addItems(line1.strip().splitlines())
                    if not line1:
                            break
                userCurrent.close()

                self.comboBoxNick.addItem('')
                self.comboBoxNick.setCurrentIndex(self.comboBoxNick.findText(''))
                userCurrent.close()


    def signin(self):
        user = self.comboBoxNick.currentText()
        s = "!@#№$%^&*<>-_=+]}'{[():;.,\~`/"    #не допустимые символы
        checkdir = os.path.exists('users')      #поверка который раз входи пользователь первый или много раз
        checkdirout = os.path.exists('users/out')   #проверка на то что пользователь вышел
        if checkdir == False:                   #если первый раз
            check = any(x for x in s if x in user)      #проверка символов
            if user != "" and check == False:           #если их нет и имя не пустоё
                os.mkdir('users')                       #создание папки пользователей
                users = open('users/current', 'w')
                users.write(f"{user}\n")                #создание файла с именем "войдённого" пользователя
                users.close()
                
                QtWidgets.QApplication.quit()           #закрытие окна
            
            elif check == True:                         #если есть не допустимые символы
#####################################################################
                Form_ErrorS = QtWidgets.QDialog()
                errors = Ui_DialogErrorInputSymbols()   #диалог с запрещёнными символами
                errors.setupUi(Form_ErrorS)
                Form_ErrorS.exec_()
#########################################################################

            elif user == '':
###############################################################
                Form_Error = QtWidgets.QDialog()
                error = Ui_DialogErrorInput()   #если имя пустое диолог о заполнении
                error.setupUi(Form_Error)
                Form_Error.exec_()
###################################################

        elif checkdir == True or checkdirout == True:   #если пользователь запускает программу не первый раз или вышел из "аккаунта"
            check = any(x for x in s if x in user)      #проверка имени
            if user != "" and check == False:           #если всё хорошо
                userNow = open('users/current', 'r+')   #открывет файл войдённого пользователя
                userList = open('users/list', 'a')  
                userList.write(userNow.read())          #копирует его в файл с бывшими пользователями
                userList.close()
                userNow.close()
                userNow = open('users/current', 'w')    #открывает файл с войдённым
                userNow.write(f'{user}\n')              # и вписывает имя нового пользователя
                userNow.close()
                if checkdirout == True:
                    os.remove('users/out')              #если пользователь выходил временый файл out удалить
                QtWidgets.QApplication.quit()           #закрыть диолог
            
            elif check == True: #запрещённые символы
                Form_ErrorS = QtWidgets.QDialog()
                errors = Ui_DialogErrorInputSymbols()
                errors.setupUi(Form_ErrorS)
                Form_ErrorS.exec_()

            elif user == '':    #пустоё имя
                Form_Error = QtWidgets.QDialog()
                error = Ui_DialogErrorInput()
                error.setupUi(Form_Error)
                Form_Error.exec_()

    def close(self):        #закрыть диолог
        QtWidgets.QApplication.quit()


    def retranslateUi(self, DialogSignIn):
        _translate = QtCore.QCoreApplication.translate
        DialogSignIn.setWindowTitle(_translate("DialogSignIn", "Прошу, входите"))
        self.pushButtonSignIn.setText(_translate("DialogSignIn", "Войти"))
        self.pushButtonExit.setText(_translate("DialogSignIn", "Закрыть"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    DialogSignIn = QtWidgets.QDialog()
    ui = Ui_DialogSignIn()
    ui.setupUi(DialogSignIn)
    DialogSignIn.show()
    sys.exit(app.exec_())
